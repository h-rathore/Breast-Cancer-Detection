# -*- coding: utf-8 -*-
"""breast_cancer_detector.h5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19eCZz7TQzB5jJMmRK0N5SR-L4Xs7SQEw
"""

!pip install scikit-learn opencv-python

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import cv2
import random
import seaborn as sns

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

from google.colab import files
import zipfile
import os

# Upload ZIP file
uploaded = files.upload()
# Example: Choose your "Breast Ultrasound Images Dataset.zip"

# Unzip the uploaded file
for file_name in uploaded.keys():
    if file_name.endswith('.zip'):
        with zipfile.ZipFile(file_name, 'r') as zip_ref:
            zip_ref.extractall('dataset')

# Set the dataset path
DATADIR = 'dataset/Breast Ultrasound Images Dataset'
CATEGORIES = ['normal', 'benign', 'malignant']

IMG_SIZE = 128
data = []

for category in CATEGORIES:
    path = os.path.join(DATADIR, category)
    class_num = CATEGORIES.index(category)  # Assign labels (0, 1, 2)

    for img in os.listdir(path):
        try:
            img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)
            resized_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
            data.append([resized_array, class_num])
        except Exception as e:
            pass

# Shuffle the dataset
random.shuffle(data)

# Separate features and labels
X = []
y = []

for features, label in data:
    X.append(features)
    y.append(label)

# Convert to numpy arrays
X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1) / 255.0
y = np.array(y)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)),
    MaxPooling2D((2,2)),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')  # 3 output classes
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_acc * 100:.2f}%")

# Accuracy Graph
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy over Epochs')
plt.show()

# Loss Graph
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss over Epochs')
plt.show()

# Predict on the test set
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred_classes)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=CATEGORIES, yticklabels=CATEGORIES)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

# Classification Report
print(classification_report(y_test, y_pred_classes, target_names=CATEGORIES))

model.save('breast_cancer_detector.h5')

def predict_image(path):
    img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = img.reshape(1, IMG_SIZE, IMG_SIZE, 1) / 255.0
    prediction = model.predict(img)
    class_idx = np.argmax(prediction)
    print(f"Predicted Class: {CATEGORIES[class_idx]}")

# Example:
# Upload a new image and predict
uploaded_image = files.upload()
predict_image(list(uploaded_image.keys())[0])

pip install flask

from flask import Flask, render_template, request
from tensorflow.keras.models import load_model
import numpy as np
import cv2
import os

app = Flask(__name__)
model = load_model('breast_cancer_detector.h5')

CATEGORIES = ['normal', 'benign', 'malignant']
IMG_SIZE = 128

def predict_image(img_path):
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = img.reshape(1, IMG_SIZE, IMG_SIZE, 1) / 255.0
    prediction = model.predict(img)
    class_idx = np.argmax(prediction)
    return CATEGORIES[class_idx]

@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        file = request.files['file']
        filepath = os.path.join('static', file.filename)
        file.save(filepath)
        prediction = predict_image(filepath)
        return render_template('result.html', prediction=prediction, image=filepath)
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)

model.save('breast_cancer_detector.h5')